Credentialed Care - Handoff Document

Front End
   Angular - http://angularjs.org/
Back End
   Server
      Server Technology: Node.JS http://nodejs.org/
   Node Packages:
      Server Framework: Express, v3.4.3 - http://expressjs.com/
      Server HTML Templating Engine: Jade - http://jade-lang.com/
      Authentication Manager: Passport + Passport-Local  http://passportjs.org/
      email-templates: Allows emails to be sent from the server utilizing HTML templates https://npmjs.org/package/email-templates
      nodemailer:Allows emails to be sent from the server https://npmjs.org/package/nodemailer
      password-hash: Password hashing module https://npmjs.org/package/password-hash
      underscore: Utility library https://npmjs.org/package/underscore
      Mocha - Testing suite for node http://visionmedia.github.io/mocha/
      should.js - BDD style assertions for node.js -- test framework agnostic
Database
   Database: MongoDB - "http://www.mongodb.org/" http://www.mongodb.org/
   Database ODM: Mongoose - "http://mongoosejs.com/" http://mongoosejs.com/

Deployment
   ...Local
      -Clone the repo from github to your local machine via 'git clone {github repo address}'
      -Install Node.JS- http://nodejs.org/
      -Install mongodb- http://www.mongodb.org/
      -From the terminal, execute 'npm install' while in the project directory
      -From the terminal, execute 'mongod' to start the database.  Note that this is a continuously running process, you will not be able to use this terminal window until you close mongo.
      -From a new terminal tab, execute 'node server.js' while in the project directory
      -In your browser, go to http://localhost:5000
   ...Remote on Heroku
      -Sign up for a Heroku account.  Credentialed Care can be hosted on Heroku for free as long as there is minimal traffic visiting the site.
      -Follow the steps provided at https://devcenter.heroku.com/articles/getting-started-with-nodejs
         -An addon will need to be installed to host the database on Heroku.  MongoHQ was used for the Heroku development deployment, see https://addons.heroku.com/mongohq.
         -Note that the package.json and Procfile have already been created and are included in the projects base directory.  The deployment process should be centered around creating the app sandbox on Heroku (via 'heroku create'), uploading the app, and renaming the app
            -Renaming the app (it will be randomly named when created on Heroku via 'heroku create') can be done by following the directions here: https://devcenter.heroku.com/articles/renaming-apps.

Project Setup:
   Database
      MongoDB must first be installed on the server machine.  For local testing, install mongoDB from http://www.mongodb.org/.  After installing, the database can be started by executing "mongod" from the terminal.  The database CLI can be opened by executing "mongo".  Once the CLI has been started, the following commands will help exploring the database: http://docs.mongodb.org/manual/reference/mongo-shell/.
   Node
      Node must be installed on the server machine. See http://nodejs.org/ to install.  Once node has been installed, the server may be started on a local machine using "node server.js" from the terminal while in the project directory.
   NPM
      NPM, Node's package manager, will be installed alongside Node.JS.  Credentialed Care uses many NPM modules that must be installed prior to running the server.  To install these modules, execute the command "npm install" from the project base directory.  A list of modules that will be installed can be found in the "package.json" file located in the project's base directory.

Environment Variables & Config
   -The config.js file inside the /config/ folder contains several configuration variables.
      -Mongoose (the MongoDB ODM) needs to be told which database to connect to.  When deployed on Heroku, it will seek a connection to either MongoLab or MongoHQ.  If this server is deployed elsewhere (Azure, AWS, etc), this DB connection variable may need to be updated.
      -The email verification feature currently uses a regular gmail account to send out emails.  The email credentials (username and password) are visible to anyone with access to the repo.  Because of this, we recommend marking the config.js to not be uploaded to github via the .gitignore file.  The config.js file can then be uploaded to your hosting service manually.  See https://help.github.com/articles/ignoring-files
      -For discussion regarding the 'NODE_ENV' variable, see below.


App ENV:
The NODE_ENV environment variable specifies the setup of the app. There are three environment setting here:
1) Production
   In this setting, the NODE_ENV is set to "Production". This should be set when the app is deployed to Heroku. This is done by executing the following command:

   $ heroku config:set NODE_ENV=production

2) Development
   The NODE_ENV is set to "Development" while developing features locally. This is done with:

   NODE_ENV=development nodemon server.js

3) Testing
   The NODE_ENV is set to "test" while running tests under the ./test directory. This environment variable is used to select the test database (instead of production or development database) while in testing mode. This is configured in ./package.json:

   ...
   ...
   ...
   "scripts": {
     "test": "NODE_ENV=test node_modules/.bin/mocha -w"
   }
   ...
   ...
   ...

   The tool used for testing is MOCHA. Its spec is at https://npmjs.org/package/mocha. 
   Its configuration is stored at ./test/mocha.opts.

   The command to run the test suite is:
   >npm test

   This will start a test runner. Any time a file is changed it will run the test suite.


Path Process 
   -Below are walkthroughs of some select code paths.  This is solely meant to provide general direction as to how the server-side codebase works.
   -New Account Creation
      -Client sends a post request to the server route '/employer-signup-initial' or '/worker-signup-initial', whichever the user is attempting to login to.
      -Express + Node listens for the request.  The express route table in /config/routes.js will recieve the request.
      -The 'initial' route will direct the request on to either employer.js or index.js.  If it is an employer request, it will trigger the employer.js function employerSignupInitial().  EmployerSignupInitial() will create a new token for that particular login account and place it onto the EmailToken collection.
      -The node mailer module will then send an email to the provided email address.
      -When the user clicks the link provided in their email, it will direct them to the login page.  This is a special version of the login page which will grab the special token that was provided in the email link and send it to the server.  The sever will then attempt to find that token on the server.  If the token is found, it will move all the relevant account data from the EmailToken collection to the cooresponding user table, be it employee or employer.
      -The user can now log into the site and use it normally.
   Job Creation
      -The user will enter data into a form on the page.
      -Angular will collect data off the form then issue a post request to the server.
      -The server will store this data into the collection JobPost.
      -An employee can now search for this job with a simple query to the database.
   Profile Creation
      -Profile creation is one of the more complex items currently due to how Angular works
      -The profile creation is a three page process governed by three different Angular controllers on three different HTML pages.  Angular does not allow information to be shared over different controllers, which means when the user switches from one page of the application to the next, all data is lost from the controller.  To remedy this, an Angular Service is used which collects all the data from each stage of the application and moves it to the next.  At the final page of the signup process, this service is sent to the server, which saves it to hte database.
      -The downside to the use of this service is that the user cannot currently go 'back' to a previous page of the form.  Although the data is preserved on the angular service, the service does not push the data back out to the form.  There are two possible solutions to increasing the usability of the signup form:
         -Since all angular models declared in the DOM are properties of the $scope object, you could create a new $scope property called $scope.application.  Continue to user the angular service to ferry data between forms, but now you have the ability to simply .extend all the properties from $scope.application to the service.  When reviewing the form in the future, extend all the properties from the service to $scope.application and this data will now show up on the form.  This was not done in the current implementation because it was assumed the $scope object would have many properties on it that would be undesirable to save in the database.
         -Alternatively, change from three separate pages to a single page and alternate between each html template using the ng-hide directive.  This would preclude needing to use a service to save data between each controller, because only one controller will be in use.
   Passport Configuration
      -Passport is a middleware to express that is used to authenticate a user and protect certain routes.  In many places in the codebase, the variable req.user can be seen.  This req.user is a reference to the current session that the request is coming from.  In other words, when a user logins, all requests coming from that client will now have the req.user property that will contain information about them from the user table until they logout.  This facilitates the use of functions that depend upon knowing who is uploading data.
      -Passport functions by virtue of four files:
         -/middlware/auth/middleware.js
         -/config/passport.js
         -/config/passportEmployer.js
         -/config/middlewares/authorization.js

Next Steps
   -Add more properties to search.  MongoDB supports this easily and this is already partially implemented for employees searching for jobs.
   -Reformat worker and job profile display, currently showing all data.
   -Add ability to upload pictures to worker profile
   -Implement background check process, previously provided by CC
   -Implement payment processing


















